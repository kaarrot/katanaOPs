
** Build + Run
#+BEGIN_SRC 
cmake .. -DCMAKE_INSTALL_PREFIX=../install_dir 
make install
export KATANA_RESOURCES=$KATANA_RESOURCES:$HOME/PRJ/katanaOPs/install_dir
./katana
#+END_SRC

** OpenEXR - quick setup
#+BEGIN_SRC 
cd $HOME/PRJ
git clone https://github.com/kubaroth/openexr-bind.git
cd openexr-bind
git checkout develop
cmake .. -DBUILD_EXR_ONLY=ON
make 

#+END_SRC



** Configure Build with OpenEXR
#+BEGIN_SRC 
cmake .. -DCMAKE_INSTALL_PREFIX=../install_dir -DOPENEXR_ROOT=$HOME/PRJ/openexr-bind/install_dir/lib -DOPENEXR_INCLUDE_DIR=$HOME/PRJ/openexr-bind/install_dir/include/ -DOPENEXR_ILMIMF_LIBRARY=$HOME/PRJ/openexr-bind/install_dir/lib/libIlmImf-2_2.so
#+END_SRC


** TODO: Fixed search for remaining dependencies
- tinyxml https://sourceforge.net/projects/tinyxml/
   - TinyXML
   - TINYXML_INCLUDE_DIR=
   - TINYXML_SOURCE_DIR

- tbb
   - TBB_INSTALL_DIR
   - TBBROOT
   - LIBRARY_PATH
- Alembic
   - ALEMBIC_ROOT
- Boost

** python
#+BEGIN_SRC 
rootNode = NodegraphAPI.GetRootNode()

NodegraphAPI.CreateNode('PrimitiveCreate', NodegraphAPI.GetRootNode())

#+END_SRC

** Other Notes

The cook() function could also be modified to read or set any attribute that you are interested in at a location, or perform a number of other operations.

For more functions that can be used in custom Ops, please see the Katana Developer Guide on the Cook Interface (C++).
 

NOTE: The Op runs at all locations by default (as specified by the applyWhere parameter in the GenericOp node), so it will automatically traverse the entire scene graph. In the example above, this results in the testType attribute being set at all locations.

Because this is not always desirable, the example above also includes an if statement checking whether interface is atRoot() - this will result in the statements inside the if block to only be executed when the Op is running at the topmost location it has been cooked at, and you can use interface.stopChildTraversal() after the if statement to stop the Op from traversing the entire scene graph beneath that topmost location.

If you would like to create a custom node type to use your Op, please refer to the example of a NodeTypeBuilder-based node type found under $KATANA_ROOT/plugins/Src/Ops/Messer/RegisterMesserNode.py.

Some NodeTypeBuilder API functions are documented in the Katana Developer Guide.
